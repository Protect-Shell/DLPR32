`timescale 1ns/1ps 
module execution(
  		input [1:0]		sel_o,
  		input [3:0]  		dec_val,
		input [4:0] 		Rs1,Rs2,Rd,
  		input  			rdy_d_to_e,cs_execution,clk,rst,
  		output reg		rdy_execution,
		output reg [31:0]	result
);
  
  reg[31:0] state;
  reg [31:0] x[31:0];
  reg [31:0] op1,op2;
  reg cs_addsub,cs_logical,cs_shift;
  wire [31:0] rslt1,rslt2,rslt3;

  arith arith(op1,op2,clk,cs_addsub,dec_val,rslt1);
  logical logical(op1,op2,clk,cs_logic,dec_val,rslt2);
  shift shift(op1,op2,clk,cs_shift,dec_val,rslt3);
always@(posedge clk)
    begin
  x[2]={32'd3};
      x[0]={32'd3};
      x[1]={32'd1};
    end
  always@(posedge clk)
    begin
if(rst)
	begin
		state=32'd0;
												
	end
      case(state)
        0:begin
          if(cs_execution)
          	state=1;
        	else
         	 state=0;
       	 end
        1:state=2;
        2:begin
          case(sel_o)
            0:state=3;
            1:state=4;
            2:state=5;
         endcase
		end
            3:state=7;
            4:state=8;
            5:state=9;
            6:state=(rdy_execution)?0:6;
	    7:state=6;
            8:state=6;
            9:state=6;
      endcase
 	end
  
  always@(state)
    begin
      case(state)
        0:begin
	rdy_execution=1;
	cs_addsub=1;
	end
        1:begin
          rdy_execution=0;
          op1=x[Rs1];
          op2=x[Rs2];
        end
        3:cs_addsub=1;
	7:begin
	result=rslt1;
          x[Rd]=result;

        end
	8:begin
	result=rslt2;
          x[Rd]=result;

        end
	9:begin
	result=rslt3;
          x[Rd]=result;

        end
        4:begin
          cs_logical=1;
        end
        5:begin
          cs_shift=1;
        end
        6:rdy_execution=1;
      endcase
    end
endmodule

